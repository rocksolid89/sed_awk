<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
<title>Адское программирование.</title>
</head>


<body BGCOLOR="FFFFFF">
<basefont size=3>
<blockquote>

<p><hr><table border=0 width="95%"><tr>
<td align="left"><font size=2>Copyright (C) А.Гавва</td>
<td align="right"><font size=2>V-0.4w май 2004</td>
</tr></table><hr><p>



<!--- header --->



<h2><a name="s3">3. Управляющие структуры</a></h2>

<p align="JUSTIFY">
Управляющие структуры любого языка программирования предназначены для описания алгоритмов программ,
или, другими словами, для описания последовательности тех действий которые выполняет программа
во время своей работы.

<p align="JUSTIFY">
Управляющие структуры языка Ада по своему стилю и назначению подобны тем конструкциям,
которые встречаются в большинстве других современных языках программирования.
Однако, при этом присутствуют и некоторые отличия.

<p align="JUSTIFY">
Как и язык в целом, управляющие структуры языка Ада, были разработаны
так, чтобы обеспечить максимальную читабельность. Все управляющие структуры
языка Ада можно разделить на простые и составные инструкции.
Все инструкции языка Ада должны завершаться символом точки с запятой.
Все составные инструкции завершаются конструкцией вида "<tt><b>end</b></tt><i> что-нибудь</i> ;".

<p align="JUSTIFY">
<!---
Подобно своему прародителю, языку Паскаль, Ада имеет четко выраженную блочную структуру.
--->


<p>
<h3><a name="s3.1">3.1 Пустая инструкция</a></h3>

<p align="JUSTIFY">
В отличие от многих других языков программирования, в Аде
явно присутствует инструкция, которая не вызывает каких-либо действий.
Такая инструкция называется пустой, и она имеет следующий вид:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>null</b>;
</pre></dir>
</td></tr></table>

<p align="JUSTIFY">
Пустая инструкция используется в тех случаях когда не требуется выполнение
каких-либо действий, но согласно синтаксиса языка должна быть записана
хотя бы одна инструкция.



<p>
<h3><a name="s3.2">3.2 Инструкция присваивания</a></h3>

<p align="JUSTIFY">
Инструкция присваивания используется в Аде для установки и изменения значений переменных.
Она использует операцию присваивания, и в общем случае имеет следующий вид:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<i>result</i> := <i>expression</i>;
</pre></dir>
</td></tr></table>


<p align="JUSTIFY">
Операция присваивания "<tt>:=</tt>" разделяет инструкцию присваивания на левую и правую части
(между символами двоеточия и знак равенства, пробелы - не допустимы!).

В левой части записывается имя переменной (<i>result</i>) содержимому которой
будет производится присваивание нового значения.
Следует заметить, что в левой части может распологаться имя только одной переменной.

В правой части записывается выражение (<i>expression</i>)
результат вычисления которого становится новым значением переменной <i>result</i>.

Выражение <i>expression</i>, расположенное в правой части, может быть одиночной переменной или
константой, может содержать переменные, константы, знаки операций и вызовы функций.
Тип переменной определяемой как <i>result</i> должен быть совместим по присваиванию с типом
результата вычисления выражения <i>expression</i>.

<p align="JUSTIFY">
Выполнение присваивания разделяется на несколько действий.

Сначала производится вычисление имени переменной <i>result</i>
и результата выражения <i>expression</i>
(порядок следования этих действий не регламентирован стандартом языка).

После этого, в случае успеха, для переменных скалярных типов
проверяется принадлежность значения результата вычисления выражения <i>expression</i>
подтипу переменной.

Если проверка успешна, то значение результата вычисления выражения <i>expression</i> становится
новым значением содержимого переменной <i>result</i>. 
При этом старое значение содержимого <i>result</i> - теряется.

Иначе, в случае какой-либо неудачи, возбуждается исключение ошибки ограничения
или, проще говоря, - ошибка, а значение переменной <i>result</i> остается без изменений.




<p align="JUSTIFY">
Приведем несколько примеров инструкций присваивания:


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

A := B + C
X := Y
</pre></dir>
</td></tr></table>


<p align="JUSTIFY">
Следует заметить, что в Аде,
в результате выполнения присваивания производится изменение только содержимого <i>result</i>
(значение содержимого переменной указанной в левой части).

Необходимо также подчеркнуть, что операция присваивания в Аде, в отличие от языков C/C++,
не возвращает значение и не обладает побочными эффектами.
Кроме того, напомним, что операция присваивания, в Аде, не допускает совмещение,
переименование и использование псевдонимов,
а также она запрещена для лимитированных типов.


<p>
<h3><a name="s3.3">3.3 Блоки</a></h3>

<p align="JUSTIFY">
Блок содержит последовательность инструкций, перед которой может располагаться
раздел описаний (все описания локальны для блока и не доступны вне блока).
За последовательностью инструкций могут следовать обработчики исключений
(обработка исключений в Аде рассматривается позже).
В общем случае инструкция блока Ады имеет вид:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>declare</b>

    -- локальные описания

<b>begin</b>

    -- последовательность инструкций

<b>exeption</b>

    -- обработчики исключений

<b>end</b>;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
Блок может иметь имя. Для этого перед инструкцией блока
записывается идентификатор, за которым ставится двоеточие. При именовании
блока, имя блока должно указываться после <tt><b>end</b></tt> завершающего блок:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

Some_Block:
<b>declare</b>
    X : Integer;
<b>begin</b>
    X := 222 * 333;
    Put(X);
<b>end</b> Some_Block;
</pre></dir>
</td></tr></table>



<p>
<h3><a name="s3.4">3.4 Условные инструкции <tt>if</tt></a></h3>


<p align="JUSTIFY">
Для организации условного выполнения последовательностей алгоритмических действий
(то есть, построения разветвляющихся алгоритмов), в Аде могут использоваться
условные инструкции <tt><b>if</b></tt>.

<p align="JUSTIFY">
Каждая инструкция <tt><b>if</b></tt> заканчивается конструкцией "<tt><b>end if</b></tt>".

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>if</b> <i>&lt;логическое_выражение&gt;</i> <b>then</b>

    -- последовательность инструкций

<b>end if</b>;

<b>if</b> <i>&lt;логическое_выражение&gt;</i> <b>then</b>

    -- последовательность инструкций 1

<b>else</b>

    -- другая последовательность инструкций 2

<b>end if</b>;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
В первом примере, приведенном выше, последовательность инструкций,
описывающая алгоритмические действия, будет выполнена только в случае когда
результат вычисления логического выражения будет иметь значение <tt>True</tt>.
Во втором примере, в случае когда результат вычисления логического выражения - <tt>True</tt>
будет выполняться "<tt>последовательность инструкций 1</tt>",
в противном случае - "<tt>последовательность инструкций 2</tt>".

<p align="JUSTIFY">
Для сокращения инструкций вида "<tt><b>else if ... </b></tt>",
и в целях улучшения читабельности, введена конструкция <tt><b>elsif</b></tt>,
которая может быть использована столько раз, сколько это будет необходимо.

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>if</b> <i>&lt;логическое_выражение&gt;</i> <b>then</b>

    -- последовательность инструкций 1

<b>elsif</b> <i>&lt;логическое_выражение&gt;</i> <b>then</b>

    -- последовательность инструкций 2

<b>elsif</b> <i>&lt;логическое_выражение&gt;</i> <b>then</b>

    -- последовательность инструкций 3

<b>else</b>

    -- последовательность инструкций

<b>end if</b>;
</pre></dir>
</td></tr></table>


<p align="JUSTIFY">
В этой форме инструкции <tt><b>if</b></tt>,
заключительная конструкция <tt><b>else</b></tt> - опциональна.

<p align="JUSTIFY">
Необходимо также заметить, что результат вычисления логического выражения
всегда должен иметь предопределенный тип <tt>Standard.Boolean</tt>.


<p>
<h3><a name="s3.5">3.5 Инструкция выбора <tt>сase</tt></a></h3>

<p align="JUSTIFY">
Еще одним средством позволяющим строить разветвляющиеся алгоритмы
является инструкция выбора <tt><b>сase</b></tt>.

<p align="JUSTIFY">
Инструкция выбора <tt><b>сase</b></tt> должна предусматривать определенное действие для
каждого возможного значения переменной селектора (переключателя).
В случаях, когда невозможно перечислить все значения переменной селектора,
нужно использовать метку <tt><b>others</b></tt>.

<p align="JUSTIFY">
Каждое значение выбора может быть представлено как одиночное значение (например, 5),
как диапазон значений (например, 1..20), или как комбинация, состоящая из одиночных
значений и/или диапазонов значений, разделенных символом '<tt>|</tt>'.

<p align="JUSTIFY">
Каждое значение выбора должно быть статическим значением, то есть оно
должно быть определено компилятором во время компиляции программы.

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>case</b>  <i>выражение</i>  <b>is</b>
    <b>when</b> <i>значение_выбора</i> =&gt; <i>действия</i>
    <b>when</b> <i>значение_выбора</i> =&gt; <i>действия</i>
      . . .
    <b>when others</b> =&gt; <i>действия</i>
<b>end case</b>;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
<b><u>Важные примечания</u></b>:
<ul>
<li>"<tt><i>выражение</i></tt>", в инструкции <tt><b>case</b></tt>, должно быть дискретного типа
<li>метка <tt><b>others</b></tt> обязательна в инструкции <tt><b>сase</b></tt>
тогда, когда инструкции <tt><b>when</b></tt> не перечисляют всех возможных значений селектора.
</ul>


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>case</b> Letter <b>is</b>
    <b>when</b> 'a'..'z'| 'A'..'Z' =&gt; Put ("letter");
    <b>when</b> '0'..'9'           =&gt; Put ("digit! Value is"); Put (letter);
    <b>when</b> ''' | '"' | '`'    =&gt; Put ("quote mark");
    <b>when</b> '&amp;'                =&gt; Put ("ampersand");
    <b>when others</b>             =&gt; Put ("something else");
<b>end case</b>;
</pre></dir>
</td></tr></table>

<p align="JUSTIFY">
В некоторых случаях, в качестве действий, указываемых для метки <tt><b>others</b></tt>,
может использоваться пустая инструкция <tt><b>null</b></tt>:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

    . . .
    <b>when others</b>  =&gt; <b>null</b>;  -- ничего не делать
    . . .
</pre></dir>
</td></tr></table>


<p>
<h3><a name="s3.6">3.6 Организация циклических вычислений</a></h3>

<p align="JUSTIFY">
При решении реальных задач часто возникает необходимость в организации циклических вычислений.
Все конструкции организации циклических вычислений в Аде имеют форму
"<tt><b>loop</b></tt> ... <tt><b>end loop</b></tt>" с некоторыми вариациями.
Для выхода из цикла может быть использована инструкция <tt><b>exit</b></tt>.



<p><h4><a name="s3.6.1">3.6.1 Простые циклы (<tt><b>loop</b></tt>)</a></h4>

<p align="JUSTIFY">
Примером простейшего цикла может служить бесконечный цикл.
Обычно он используется совместно с инструкцией <tt><b>exit</b></tt>, рассматриваемой позже.


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>loop</b>

    -- инструкции тела цикла

<b>end loop</b>;
</pre></dir>
</td></tr></table>



<p><h4><a name="s3.6.2">3.6.2 Цикл <tt><b>while</b></tt></a></h4>

<p align="JUSTIFY">
Во многих случаях, прежде чем выполнять действия которые описываются инструкциями
тела цикла, необходимо проверить какое-либо условие. Для таких случаев Ада предусматривает
конструкцию цикла <tt><b>while</b></tt>.

<p align="JUSTIFY">
Цикл <tt><b>while</b></tt> идентичен циклу <tt><b>while</b></tt> в языке Паскаль. Проверка условия
выполнения цикла производится до входа в блок инструкций составляющих тело цикла.
При этом, если результат вычисления логического выражения будет <tt>True</tt>,
то будет выполнен блок инструкций тела цикла. В противном случае, тело цикла -
не выполняется.

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>while</b> <i>логическое_выражение</i> <b>loop</b>

    -- инструкции тела цикла

<b>end loop</b>;
</pre></dir>
</td></tr></table>


<p align="JUSTIFY">
Необходимо заметить, что результат вычисления логического выражения
должен иметь предопределенный тип <tt>Standard.Boolean</tt>



<p><h4><a name="s3.6.3">3.6.3 Цикл <tt><b>for</b></tt></a></h4>

<p align="JUSTIFY">
Еще одним распространенным случаем является ситуация когда необходимо выполнить
некоторые действия заданное количество раз, то есть организовать счетный цикл.
Для этого Ада предусматривает конструкцию цикла <tt><b>for</b></tt>.

<p align="JUSTIFY">
Конструкция цикла <tt><b>for</b></tt> Ады
аналогична конструкции цикла <tt><b>for</b></tt>, представленной в языке Паскаль.

<p align="JUSTIFY">
Существует несколько правил использования цикла <tt><b>for</b></tt>:
<ul>
<li>тип переменной-счетчика цикла <tt><b>for</b></tt> определяется типом указываемого
диапазона значений счетчика, и должен быть дискретного типа, вещественные значения - недопустимы
<li>счетчик не может быть модифицирован в теле цикла, другими словами -
счетчик доступен только по чтению
<li>область действия переменной-счетчика распространяется только на тело цикла
</ul>

<p align="JUSTIFY">
Примечательно также, что тело цикла не будет выполняться если при указании диапазона
значений переменной-счетчика
величина значения "нижней границы" будет больше чем величина значения "верхней границы".


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>for</b> <i>счетчик</i> <b>in</b> <i>диапазон_значений_счетчика</i> <b>loop</b>

    -- инструкции тела цикла

<b>end loop</b>;


<b>for</b>  Count <b>in</b> 1..20 <b>loop</b>
    Put (Count);
<b>end loop</b>;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
Возможен перебор значений диапазона в обратном порядке:


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>for</b> <i>счетчик</i> <b>in reverse</b> <i>диапазон_значений_счетчика</i> <b>loop</b>

    -- инструкции тела цикла

<b>end loop</b>;


<b>for</b> Count <b>in reverse</b> 1..20 <b>loop</b>
    Put (Count);
<b>end loop</b>;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
Любой дискретный тип может использоваться для указания диапазона значений переменной-счетчика.

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>declare</b>
    <b>subtype</b> List <b>is</b> Integer <b>range</b> 1..10;

<b>begin</b>
    <b>for</b> Count <b>in</b> List <b>loop</b>
        Put (Count);
    <b>end loop</b>;
<b>end</b>;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
Здесь, тип <tt>List</tt> был использован для указания диапазона значений переменной-счетчика
<tt>Count</tt>. Подобным образом также можно использовать любой перечислимый тип.


<p>
<h4><a name="s3.6.4">3.6.4 Инструкции <tt>exit</tt> и <tt>exit when</tt></a></h4>

<p align="JUSTIFY">
Инструкции <tt><b>exit</b></tt> и <tt><b>exit when</b></tt> могут быть использованы для
преждевременного выхода из цикла. При этом, выполнение программы будет продолжено в точке
непосредственно следующей за циклом. Два варианта, показанных ниже, имеют
одинаковый эффект:


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>loop</b>

    -- инструкции тела цикла

    <b>if</b> <i>логическое_выражение</i> <b>then</b>
        <b>exit</b>;
    <b>end if</b>;
<b>end loop</b>;


<b>loop</b>

    -- инструкции тела цикла

    <b>exit when</b> <i>логическое_выражение</i>;
<b>end loop</b>;
</pre></dir>
</td></tr></table>



<p><h4><a name="s3.6.5">3.6.5 Именованые циклы</a></h4>

<p align="JUSTIFY">
Инструкции преждевременного выхода из цикла <tt><b>exit</b></tt> и <tt><b>exit when</b></tt>, обычно,
осуществляют выход из того цикла, который непосредственно содержит данную инструкцию.
Однако, мы можем именовать циклы и модифицировать инструкцию выхода из цикла
так, чтобы осуществлять выход сразу из всех вложенных циклов. Во всех случаях,
следующая выполняемая инструкция будет следовать сразу за циклом из которого
был осуществлен выход.

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

outer_loop:
<b>loop</b>

    -- инструкции

    <b>loop</b>

        -- инструкции

        <b>exit</b> outer_loop <b>when</b> <i>логическое_выражение</i>;
    <b>end loop</b>;
<b>end loop</b> outer_loop;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
Примечательно, что в случае именованого цикла <tt><b>end loop</b></tt>
также необходимо именовать меткой.

<p>
<h3><a name="s3.7">3.7 Инструкция перехода <tt><b>goto</b></tt></a></h3>

<p align="JUSTIFY">
Инструкция перехода <tt><b>goto</b></tt> предусмотрена для использования в языке Ада,
в исключительных ситуациях, и имеет следующий вид:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>goto</b> Label;

&lt;&lt;Label&gt;&gt;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
Использование инструкции <tt><b>goto</b></tt> очень ограничено и четко осмысленно.
Вы не можете выполнить переход внутрь условной инструкции <tt><b>if</b></tt>,
внутрь цикла (<tt><b>loop</b></tt>), или, как в языке Паскаль, за пределы подпрограммы.

<p align="JUSTIFY">
Вообще, при таком богатстве алгоритмических средств Ады, использование <tt><b>goto</b></tt>
едва-ли можно считать оправданным.






<!--- footer --->




<p><hr><table border=0 width="95%"><tr>
<td align="left"><font size=2>Copyright (C) А.Гавва</td>
<td align="right"><font size=2>V-0.4w май 2004</td>
</tr></table><hr><p>




</blockquote>
</body>
</html>

