<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
<title>Адское программирование.</title>
</head>


<body BGCOLOR="FFFFFF">
<basefont size=3>
<blockquote>

<p><hr><table border=0 width="95%"><tr>
<td align="left"><font size=2>Copyright (C) А.Гавва</td>
<td align="right"><font size=2>V-0.4w май 2004</td>
</tr></table><hr><p>



<!--- header --->



<h2><a name="s1">1. Элементарные понятия.</a></h2>

<p>
<h3><a name="s1.1">1.1 "Сюрпризы" переводной терминологии</a></h3>

<p align="JUSTIFY">
Прежде чем приступить к непосредственному знакомству с Адой, есть необходимость заметить, что
в англоязычной литературе,
посвященной вычислительной технике в целом и программированию в частности,
достаточно часто встречаются такие английские термины как
<i>operator</i>, <i>operation</i> и <i>statement</i>.
При сложившейся практике перевода такой документации на русский язык, эти термины,
как правило, переводят следующим образом:
    
    <dir><table border=0>
    <tr>
      <td valign="top"><font size=1><i>operation</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>операция</td>
    </tr>
    <tr>
    <td valign="top"><font size=1><i>operator</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>операция, оператор</td>
    <tr>
    <td valign="top"><font size=1><i>statement</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>оператор</td>
    </tr>
    </table></dir>

<p align="JUSTIFY">
На первый взгляд, проблема перевода данных терминов достаточно безобидна.
Однако, при таком традиционном подходе, добившись приемлемой благозвучности изложения материала,
достаточно сложно избежать неоднозначностей и даже путаницы при обсуждении некоторых основополагающих
вопросов. Также стоит особо отметить, что стандарт языка Ада строго различает такие понятия.

<p align="JUSTIFY">
В действительности, смысловое значение данных терминов,
при их употреблении в англоязычной документации,
как правило, имеет следующее русскоязычное толкование:

    <dir><table border=0 width="85%">
    <tr>
      <td valign="top"><font size=1><i>operation</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>
      непосредственно обозначает понятие операции, функции или какого-либо действия,
      в совокупности составляющего выполнение команды (или набора команд) процессора
      </td>
    </tr>
    <tr>
    <td valign="top"><font size=1><i>operator</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>
      обозначает понятие <u>знака</u> или <u>обозначения</u> операции, функции или
      какого-либо действия, что подразумевает не столько само действие для выполнения операции,
      сколько обозначение операции в тексте программы
      </td>
    </tr>
    <tr>
    <td valign="top"><font size=1><i>statement</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>
      элемент текста программы, выражающий целостное законченное действие
      (или набор действий)
      </td>
    </tr>
    </table></dir>

<p align="JUSTIFY">
Таким образом, исходя из всего выше сказанного,
в данной работе, для достижения однозначности,
принято следующее соответствие терминов:
    
    <dir><table border=0>
    <tr>
      <td valign="top"><font size=1><i>operation</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>операция</td>
    </tr>
    <tr>
    <td valign="top"><font size=1><i>operator</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>знак операции</td>
    <tr>
    <td valign="top"><font size=1><i>statement</i></td>
      <td valign="top"><font size=1>&nbsp;</td> 
      <td valign="top"><font size=1>инструкция</td>
    </tr>
    </table></dir>


<p align="JUSTIFY">
Хотя такое решение выглядит несколько не привычно,
оно не должно вызвать трудности при рассмотрении материала
представленного в этой работе.



<p>
<h3><a name="s1.2">1.2 Первая программа</a></h3>

<p align="JUSTIFY">
Для того, чтобы дать "почувствовать", что представляет из себя программа написанная на языке Ада
рассмотрим простую программу. Традиционно, первая программа - это программа
которая выводит на экран приветствие: "Hello World!".
Не будем нарушать традицию. Итак, на Аде такая программа будет иметь следующий вид:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>with</b> Ada.Text_IO;
<b>use</b> Ada.Text_IO;

<b>procedure</b> Hello <b>is</b>
<b>begin</b>
    Put_Line("Hello World!");
<b>end</b> Hello;
</pre></dir>
</td></tr></table>

<p align="JUSTIFY">
Давайте детально рассмотрим из каких частей состоит текст этой программы.

Строка "<tt><b>procedure</b> Hello <b>is</b></tt>" является заголовком процедуры
и она указывает имя нашей процедуры.

Далее, между зарезервированными словами <tt><b>begin</b></tt> и <tt><b>end</b></tt>,
располагается тело процедуры <tt>Hello</tt>.

В этом примере тело процедуры очень простое и состоит из единственной инструкции
"<tt>Put_Line("Hello World!");</tt>".

Эта инструкция осуществляет вывод приветствия на экран, вызывая процедуру <tt>Put_Line</tt>.

Процедура <tt>Put_Line</tt> располагается в пакете текстового ввода/вывода <i>Ada.Text_IO</i>, и
становится доступной благодаря спецификации контекста в инструкциях
"<tt><b>with</b> Ada.Text_IO;</tt>" и "<tt><b>use</b> Ada.Text_IO;</tt>"
(спецификация контекста необходима для указания используемых библиотечных модулей).
Здесь, спецификатор контекста состоит из двух спецификаторов: спецификатора совместности
<tt><b>with</b></tt> и спецификатора использования <tt><b>use</b></tt>.
Cпецификатор совместности <tt><b>with</b></tt> указывает компоненты которые
будут использоваться в данном компилируемом модуле.
Cпецификатор использования <tt><b>use</b></tt> делает имена используемых объектов
непосредственно доступными в данном компилируемом модуле.

<p align="JUSTIFY">
Программа <tt>Hello</tt> настолько проста, что в ней нет ни переменных, ни какой-либо обработки
данных, поэтому, несколько забегая вперед, приведем общий вид процедуры.


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir>

  <table BGCOLOR="E0E0E0" border=0 width="100%">

  <tr>
  <td><font size=1><pre>
<b>with</b> ... ;
<b>use</b>  ... ;</pre></td>
  <td><font size=1>&nbsp;&nbsp;</td>
  <td><font size=1 align="center">спецификаторы контекста, указывающие используемые модули (могут отсутствовать)</td>
  </tr>
<tr><td><font size=1>&nbsp;&nbsp;</td><td><font size=1>&nbsp;&nbsp;</td><td><font size=1>&nbsp;&nbsp;</td></tr>

  <tr>
  <td><font size=1><pre><b>procedure</b> <i><u>&lt; имя процедуры &gt;</u></i> ... <b>is</b></pre></td>
  <td><font size=1>&nbsp;&nbsp;</td>
  <td><font size=1>спецификация процедуры, определяющая имя процедуры и ее параметры (если они есть)</td>
<!---
  <td><font size=1>инструкция, определяющая имя процедуры и ее параметры (если они есть)</td>
--->
  </tr>
<tr><td><font size=1>&nbsp;&nbsp;</td><td><font size=1>&nbsp;&nbsp;</td><td><font size=1>&nbsp;&nbsp;</td></tr>

  <tr>
  <td><font size=1><pre>    . . .</pre></td>
  <td><font size=1>&nbsp;</td>
  <td><font size=1>описательная (или декларативная) часть, которая может содержать описания типов,
  переменных, констант и подпрограмм</td>
  </tr>
<tr><td><font size=1>&nbsp;&nbsp;</td><td><font size=1>&nbsp;&nbsp;</td><td><font size=1>&nbsp;&nbsp;</td></tr>

  <tr>
  <td><font size=1><pre><b>begin</b> </pre></td>
  <td><font size=1>&nbsp;&nbsp;</td>
  <td><font size=1>&nbsp;</td>
  </tr>


  <tr>
  <td><font size=1><pre>    . . .</pre></td>
  <td><font size=1>&nbsp;&nbsp;</td>
  <td><font size=1>исполняемая часть процедуры, которая описывает алгоритм работы процедуры</td>
  </tr>
<tr><td><font size=1>&nbsp;&nbsp;</td><td><font size=1>&nbsp;&nbsp;</td><td><font size=1>&nbsp;&nbsp;</td></tr>

  <tr>
  <td><font size=1><pre><b>end</b> <i><u>&lt; имя процедуры &gt;</u></i>;</td>
  <td><font size=1>&nbsp;&nbsp;</td>
  <td><font size=1>здесь, указание имени процедуры не является обязательным</td>
  </tr>

</table>

</dir>
</td></tr></table>

<p align="JUSTIFY">
Необходимо заметить, что в отличие от языков С/C++, которые имеет функцию <tt><b>main</b></tt>,
и языка Паскаль, который имеет <tt><b>program</b></tt>,
в Аде, любая процедура без параметров может быть подпрограммой <tt>main</tt>
(другими словами - головной программой). Таким образом, процедура без параметров
может быть выбрана как головная программа во время линковки.

<p align="JUSTIFY">
Теперь, приведем еще один простой пример, в котором, для выдачи сообщения приветствия, используется
ранее рассмотренная процедура <tt>Hello</tt>:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>with</b> Hello;    -- указывает на использование показанной ранее
               -- процедуры Hello

<b>procedure</b> Use_Hello <b>is</b>
<b>begin</b>
    Hello;            -- вызов процедуры Hello
<b>end</b> Use_Hello;
</pre></dir>
</td></tr></table>


<p>
<h3><a name="s1.3">1.3 Библиотека и компилируемые модули</a></h3>

<p align="JUSTIFY">
В общем случае, программа на языке Ада представляет собой один или несколько программных
модулей, которые могут компилироваться как совместно, так и раздельно.

Кроме того, программные модули являются основой построения библиотек Ады,
поэтому их также называют библиотечными модулями.

Программные модули бывают четырех видов:

<ul>
<li><p align="JUSTIFY">
<b>Подпрограммы</b> - Являются основным средством описания алгоритмов.
Различают два вида подпрограмм: процедуры и функции.
Процедура - это логический аналог некоторой именованной последовательности действий.
Функция - логический аналог математической функции - используется для вычисления какого-либо значения.

<li><p align="JUSTIFY">
<b>Пакет</b> - Основное средство для определения набора логически взаимосвязанных понятий.

В простейшем случае в пакете специфицируются описания типов и общих объектов.

В более общем случае в нем могут специфицироваться группы
взаимосвязанных понятий, включающих подпрограммы, причем,
некоторые описываемые в пакете сущности могут быть "скрыты" от пользователя,
что дает возможность предоставления доступа только к тем ресурсам пакета,
которые необходимы пользователю и, следовательно, должны быть для него доступны.


<li><p align="JUSTIFY">
<b>Задача</b> или <b>задачный модуль</b> -

Средство для описания последовательности действий,
причем, при наличии нескольких таких последовательностей
они могут выполняться параллельно.

Задачи могут быть реализованы на многомашинной или многопроцессорной вычислительной конфигурации,
либо на единственном процессоре в режиме разделения времени.

Синхронизация достигается путем обращения ко входам,
которые подобно подпрограммам могут иметь параметры, с помощью которых
осуществляется передача данных между задачами.

<li><p align="JUSTIFY">
<b>Настраиваемые модули</b> -
Средство для параметризации подпрограмм или пакетов.

В ряде случаев возникает необходимость обрабатывать объекты,
которые отличаются друг от друга количеством данных,
типами или какими-либо другими количественными или
качественными характеристиками.

Если все эти изменяемые характеристики вынести из подпрограммы или пакета, то получится
некоторая заготовка (или шаблон), которую можно настроить на конкретное выполнение.

Непосредственно выполнить настраиваемый модуль нельзя.

Но из него можно получить экземпляр настроенного модуля (подпрограмму или пакет),
который пригоден для выполнения.
</ul>


<p align="JUSTIFY">
Каждый программный модуль обычно состоит из двух частей: спецификации и тела.
Спецификация описывает интерфейс к модулю, а тело - его реализацию.

Примечательно, что спецификация и тело программного модуля
являются самостоятельными компилируемыми модулями,
то есть, они могут компилироваться раздельно.

Разбиение модуля на спецификацию и тело,
а также возможность раздельной компиляции позволяют разрабатывать,
кодировать и тестировать любую программу или систему как набор достаточно
независимых компонентов.

Такой подход полезен при разработке больших программных систем.





<p>
<h3><a name="s1.4">1.4 Лексические соглашения</a></h3>

<p align="JUSTIFY">
Лексические соглашения описывают допустимые символы и последовательности
символов, которые используются при обозначении идентификаторов, определяющих имена переменных
и констант, подпрограмм и пакетов, указывают правила написания числовых значений, а также описывают
некоторые специальные последовательности символов, используемые языком программирования.

Согласно требований стандарта,
реализация должна поддерживать как минимум 200-символьные строки исходного текста
(максимальная длина лексических элементов - не определена).



<p><h4><a name="s1.4.1">1.4.1 Комментарии</a></h4>

<p align="JUSTIFY">
Начнем с комментариев.
Для облегчения понимания алгоритма работы программы, в текст программы могут, и должны
помещаться комментарии.
Комментарий начинается с двух символов дефиса "<tt>--</tt>" и продолжается до конца строки. Пример:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

  -- это комментарий
  --- это тоже комментарий
</pre></dir>
</td></tr></table>


<p><h4><a name="s1.4.2">1.4.2 Идентификаторы</a></h4>

<p align="JUSTIFY">
Теоретически, согласно требований стандарта, идентификаторы могут быть любой длины,
однако, длина может быть ограничена реализацией конкретного компилятора. Общие правила
таковы:
<ol>
<li>Идентификатор может состоять из букв, цифр и символов подчеркивания. 
<li>Идентификатор <b>обязан</b> начинаться с символа. 
<li>В идентификаторе <b>нельзя</b> использовать несколько символов подчеркивания подряд.
<li>Символ подчеркивания <b>не</b>  может быть первым и последним символом в идентификаторе.
<li>Все идентификаторы в ADA <b>не</b> зависят от регистра символов.
</ol>

<p align="JUSTIFY">
Например:


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

Apple, apple, APPLE     -- один и тот же идентификатор
Max_Velocity_Attained
Minor_Number_           -- недопустимо, завершающий символ - подчеркивание
Minor__Revision         -- недопустимо, последовательность подчеркиваний
</pre></dir>
</td></tr></table>



<p><h4><a name="s1.4.3">1.4.3 Литералы</a></h4>

<p align="JUSTIFY">
Литералы служат для явного указания значения некоторого типа, сохраняемого в программе. Различают
числовые, символьные и строковые литералы.

<!---
<p><h4><i><a name="s1.4.3.1">1.4.3.1 Числовые литералы</a></i></h4>
--->

<p align="JUSTIFY">
<b>Числовые литералы</b>, как не трудно догадаться, используются для представления численных
значений. Они могут содержать в себе символы подчеркивания (для удобочитаемости), однако,
они <b>не</b> могут начинаться или заканчиваться символом подчеркивания, или содержать более одного
символа подчеркивания подряд. Различают числовые литералы для представления целочисленных и
вещественных значений.

<p align="JUSTIFY">
Примеры целочисленных литералов, представляющих значение числа 2000:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

  2000
  2_000
  2E3       -- для целочисленных литералов разрешена экспоненциальная форма
  2E+3    
</pre></dir>
</td></tr></table>


<p align="JUSTIFY">
Возможно представление чисел в разных системах счисления, например, представление
десятичного числа 12 может быть задано следующими литералами:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

  2#1100#   -- двоичная система счисления
  8#14#     -- восьмеричная
  10#12#    -- десятичная (здесь, указана явно)
  16#C#     -- шестнадцатиричная
  7#15#     -- семиричная
</pre></dir>
</td></tr></table>


<p align="JUSTIFY">
Литералы, описывающие вещественные значения, содержат точку и обязаны иметь хотя бы
по одной цифре до и после точки. Примеры:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

  3.14
  100.0
  0.0
</pre></dir>
</td></tr></table>

<!---
<p><h4><i><a name="s1.4.3.2">1.4.3.2 Символьные литералы</a></i></h4>
--->

<p align="JUSTIFY">
<b>Символьные литералы</b> обозначают одиночные символы, и для их обозначения используются
одинарные кавычки. Например:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

  'a'
  'b'
</pre></dir>
</td></tr></table>

<dir><p align="JUSTIFY">
<b>Примечание:</b><br>
В отличие от языка Паскаль, в Аде <b>нельзя</b> производить присваивание символьного литерала
строковой переменной (подробности о работе со строками в Аде мы пока отложим на потом).
</dir>

<!---
<p><h4><i><a name="s1.4.3.3">1.4.3.3 Строковые литералы</a></i></h4>
--->


<p align="JUSTIFY">
<b>Строковые литералы</b> предназначены для обозначения строковых значений, и для их обозначения
используются двойные кавычки. Например:

<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

  "это строковый литерал"
  "a"                     -- это тоже строковый литерал, хотя и односимвольный
</pre></dir>
</td></tr></table>

<dir><p align="JUSTIFY">
<b>Примечание:</b><br>
Строковый литерал не может непосредственно содержать символ табуляции, хотя значение строковой
переменной или константы - может. Это достигается путем конкатенации строки и символа, или вставкой
символа в строку.
</dir>


<p><h4><a name="s1.4.4">1.4.4 Зарезервированные слова</a></h4>

<p align="JUSTIFY">
Некоторые слова, такие как
<tt><b>with</b></tt>, <tt><b>procedure</b></tt>, <tt><b>is</b></tt>, <tt><b>begin</b></tt>,
<tt><b>end</b></tt> и т.д.,
являются частью самого языка программирования. Такие слова называют зарезервированными
(или ключевыми) и
они не могут быть использованы в программе в качестве имен идентификаторов.
Полный список зарезервированных слов Ады приводится ниже:

<p>
<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

  abort         else             new              return
  abs           elsif            not              reverse
* abstract      end              null           
  accept        entry                             select
  access        exception                         separate
* aliased       exit             of               subtype
  all                            or             
  and           for              others         * tagged
  array         function         out              task
  at                                              terminate
                generic          package          then
  begin         goto             pragma           type
  body                           private        
                if               procedure      
  case          in             * protected      * until
  constant      is                                use
                                 raise          
  declare                        range            when
  delay         limited          record           while
  delta         loop             record           while
  digits                         renames        
  do            mod            * requeue          xor
</pre></dir>
</td></tr></table>




<dir><p align="JUSTIFY">
<b>Примечание:</b><br>
Зарезервированные слова помеченные звездочкой введены стандартом Ada95.
</dir>


<p>
<h3><a name="s1.5">1.5 Методы Ады: подпрограммы, операции и знаки операций</a></h3>

<p align="JUSTIFY">
Методами Ады являются подпрограммы (процедуры и функции), а также операции и знаки операций
(возможно более корректно будет звучать:
с помощью подпрограмм осуществляется реализация действий, выполняемых операциями и знаками операций).
Необходимо отметить, что стандарт Ады строго различает понятия знаков операций (<i>operators</i>)
и операций (<i>operations</i>). 

<p align="JUSTIFY">
Знаки операций представляются следующими символами (или комбинациями символов):

"<tt><b>=</b></tt>", "<tt><b>/=</b></tt>", "<tt><b>&lt;</b></tt>", "<tt><b>&gt;</b></tt>",
"<tt><b>&lt;=</b></tt>", "<tt><b>&gt;=</b></tt>", "<tt><b>&</b></tt>", "<tt><b>+</b></tt>",
"<tt><b>-</b></tt>", "<tt><b>/</b></tt>", "<tt><b>*</b></tt>".

Другие знаки операций выражаются зарезервированными словами:

"<tt><b>and</b></tt>", "<tt><b>or</b></tt>", "<tt><b>xor</b></tt>", "<tt><b>not</b></tt>",
"<tt><b>abs</b></tt>", "<tt><b>rem</b></tt>", "<tt><b>mod</b></tt>",
-
или могут состоят из нескольких зарезервированных слов:
"<tt><b>and then</b></tt>", "<tt><b>or else</b></tt>".

Ада позволяет осуществлять программисту совмещение (<i>overloading</i>) знаков операций
(в современной литературе по Си++ это часто называется как "перегрузка операторов").

<dir><p align="JUSTIFY">
В общем случае, <b>совмещением</b> (<i>overloading</i>) называют механизм, который позволяет
различным сущностям использовать одинаковые имена.
</dir>

<p align="JUSTIFY">
Использование "<tt><b>use type</b></tt>" делает знаки операций именованных типов локально видимыми.
Кроме того, их можно сделать локально видимыми используя локальное переименование.

<p align="JUSTIFY">
Операции включают в себя присваивание, проверку принадлежности диапазону
и любые другие именованные операции.
Операции, также как и знаки операций, допускают совмещение.

<p align="JUSTIFY">
Следует заметить, что Ада накладывает некоторые ограничения на использование совмещений:
совмещения не допускаются для операций присваивания и проверки принадлежности диапазону,
а также для знаков операций "<tt><b>and then</b></tt>" и "<tt><b>or else</b></tt>".

<p align="JUSTIFY">
Операция присваивания обозначается комбинацией символов "<tt><b>:=</b></tt>".
Она предопределена для всех нелимитированных типов. Операция присваивания не может
быть совмещена или переименована.
Присваивание запрещено для лимитированных типов.
Необходимо подчеркнуть, что операция присваивания в Аде, в отличие от языков C/C++,
не возвращает значение и не обладает побочными эффектами.

<p align="JUSTIFY">
Еще одной разновидностью операций является операция проверки принадлежности диапазону,
которая обозначается с помощью зарезервированного слова "<tt><b>in</b></tt>".
Для выполнения проверки на не принадлежность "<tt><b>in</b></tt>" может комбинироваться
с "<tt><b>not</b></tt>" - "<tt><b>not in</b></tt>". Проверка на принадлежность диапазону
разрешена для всех типов Ады, включая лимитированные.

<p align="JUSTIFY">
Другие операции могут быть описаны программистом.
Как правило, описания таких операций выполняются в спецификации пакета,
а реализация операций выполняется с помощью соответствующих подпрограмм.



<p>
<h3><a name="s1.6">1.6 Инструкции, выражения и элаборация</a></h3>


<p align="JUSTIFY">
Очевидно, что исполнение инструкций осуществляется во время выполнения программы
с целью выполнить какие-либо действия.

Также, во время выполнения программы
осуществляются вычисления различных выражений для получения значений каких-либо типов.

Кроме того, во время выполнения программы
происходит вычисление различных имен,
которые указывают на соответствующие объекты
(содержащие какие-либо значения)
или другие сущности
(такие как подпрограммы и типы).


<p align="JUSTIFY">
Некоторые конструкции языка содержат описательные части,
сопровождаемые последовательностями инструкций.

Например, тело процедуры может иметь следующий вид:


<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>procedure</b> P( ... ) <b>is</b>
    I: Integer := 1;    -- описательная часть
    . . .
<b>begin</b>
    . . .               -- последовательность инструкций
    I := I * 2;
    . . .
<b>end</b> P;
</pre></dir>
</td></tr></table>



<p align="JUSTIFY">
Перед выполнением тела процедуры происходит элаборация (<i>elaboration</i>) всех описаний,
которые указаны в описательной части.

Последовательность элаборации описаний определяется
порядком их следования в описательной части.

Эффект от элаборации описаний заключается
в создании сущностей, определенных в описаниях,
и в выполнении прочих действий,
которые специфичны для описаний.

Например,
элаборация описания переменной
может осуществить инициализацию этой переменной значением,
которое определяется результатом вычисления какого-либо выражения.

Достаточно часто значения подобных выражений могут быть вычислены
в процессе компиляции программы.
<!--
Однако, если описания содержат не статические выражения,
то элаборацию таких выражений необходимо осуществлять
во время выполнения программы.
-->

<p align="JUSTIFY">
После завершения элаборации,
осуществляется исполнение последовательности инструкций,
в порядке их следования
(за исключением случаев, когда осуществляется передача управления
в какое-либо другое место, отличное от последующей инструкции).

Инструкция присваивания позволяет заменить значение переменной
результатом вычисления выражения того же самого типа.

Обычно, присваивание осуществляется простым побитовым копированием значения,
которое получено в результате вычисления выражения.

Однако,
в случае нелимитированных контролируемых типов,
после осуществления побитового копирования,
пользователь (при необходимости) может определить дополнительную последовательность действий.

Инструкции <tt><b>case</b></tt> и <tt><b>if</b></tt>
позволяют осуществлять выбор выполнения определенной последовательности инструкций,
полагаясь на результат вычисления какого-нибудь выражения.

Инструкция <tt><b>loop</b></tt>
позволяет повторять выполнение последовательности каких-либо инструкций,
согласно выбранной схемы итерации,
или до обнаружения инструкции <tt><b>exit</b></tt>.

Инструкция <tt><b>goto</b></tt>
осуществляет передачу управления в место отмеченное соответствующей меткой.


<p align="JUSTIFY">
Выражения могут быть использованы в различном контексте,
как в описаниях,
так и в инструкциях.

Используемые в языке Ада выражения,
во многом подобны выражениям,
которые используются в большинстве современных языков программирования.

Они могут содержать обращения к переменным, константам и литералам,
кроме того они могут использовать любые операции,
которые возвращают значения.

Результатом вычисления любого выражения является значение.

Каждое выражение имеет определенный тип,
который известен на этапе компиляции.


<p align="JUSTIFY">
Во многих случаях
результаты вычисления выражений
и ограничения подтипов определяются статически
(существует возможность отключения некоторых динамических проверок ограничений подтипов
с помощью использования соответствующих опций компилятора).

Более того,
достаточно часто
компилятор Ады требует
чтобы вычисление некоторых выражений и подтипов
осуществлялось на этапе компиляции программы.

Например,
в общем случае вся информация об описании известна во время компиляции,
следовательно,
элаборация во время выполнения программы
не потребует выполнения какого-либо машинного кода.

Язык определяет механизмы
согласно которых Ада-компиляторы могут осуществлять предварительную элаборацию некоторых модулей,
то есть,
реальные действия,
которые необходимы для осуществления элаборации,
выполняются однократно,
на этапе компиляции программы,
вместо того, чтобы выполнять их при каждом запуске программы.







<p>
<h3><a name="s1.7">1.7 Директивы компилятора</a></h3>


<p align="JUSTIFY">
Бывают случаи, когда в исходном тексте необходимо указывать
какую-либо дополнительную информацию, которая предназначена
сугубо для компилятора.

Например, такая информация может предоставлять компилятору дополнительные сведения
о режимах трансляции программного модуля, который компилируется в текущий момент
времени (оптимизация генерируемого двоичного кода, вставка отладочного
кода и т.д.) или управлять распечаткой листинга трансляции.

<p align="JUSTIFY">
Для Ады, как и для многих других современных языков и сред программирования,
такими средствами передачи дополнительной информации компилятору
являются директивы компилятора.

При указании директивы компилятору Ада использует зарезервированное
слово <tt><b>pragma</b></tt>. Общий вид указания директивы компилятору
следующий:



<p><table BGCOLOR="E0E0E0" border=0 width="95%">
<tr><td><font size=1>
<dir><pre>

<b>pragma</b> <i>&lt; имя_директивы &gt;</i> ( <i>&lt; параметры_директивы &gt;</i> );
</pre></dir>
</td></tr></table>

<p align="JUSTIFY">
Стандарт языка Ада определяет 39 директив, список которых представлен
в приложении L (<i>Annex L</i>) руководства по языку программирования Ада (<i>RM-95</i>).
Кроме того, конкретная реализация компилятора может обеспечивать
дополнительные директивы компилятора которые, как правило, описываются в
сопроводительной документации компилятора.


<p align="JUSTIFY">
Выражаясь не строго, можно заметить,
что директивы компилятора не изменяют общий смысл программы.






<!--- footer --->




<p><hr><table border=0 width="95%"><tr>
<td align="left"><font size=2>Copyright (C) А.Гавва</td>
<td align="right"><font size=2>V-0.4w май 2004</td>
</tr></table><hr><p>




</blockquote>
</body>
</html>

